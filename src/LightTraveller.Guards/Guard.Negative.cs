using System.Runtime.CompilerServices;
using static LightTraveller.Guards.Messages;

namespace LightTraveller.Guards;

public partial class Guard
{
    /// <summary>
    /// Throws if the input argument is a negative number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to a negative value.</exception>
    public static int Negative(int param, string? message = null, [CallerArgumentExpression("param")] string expression = "")
    {
        if (param < 0)
            Helper.ArgumentException.Throw(message.IfEmptyThen(IntegerNegative, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is a negative number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to a negative value.</exception>
    public static long Negative(long param, string? message = null, [CallerArgumentExpression("param")] string expression = "")
    {
        if (param < 0L)
            Helper.ArgumentException.Throw(message.IfEmptyThen(LongNegative, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is a negative number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to a negative value.</exception>
    public static float Negative(float param, string? message = null, [CallerArgumentExpression("param")] string expression = "")
    {
        if (param < 0F)
            Helper.ArgumentException.Throw(message.IfEmptyThen(FloatNegative, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is a negative number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to a negative value.</exception>
    public static double Negative(double param, string? message = null, [CallerArgumentExpression("param")] string expression = "")
    {
        if (param < 0D)
            Helper.ArgumentException.Throw(message.IfEmptyThen(DoubleNegative, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is a negative number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to a negative value.</exception>
    public static decimal Negative(decimal param, string? message = null, [CallerArgumentExpression("param")] string expression = "")
    {
        if (param < 0M)
            Helper.ArgumentException.Throw(message.IfEmptyThen(DecimalNegative, expression), expression);

        return param;
    }
}