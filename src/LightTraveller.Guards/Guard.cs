using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;

namespace LightTraveller.Guards;

public partial class Guard
{
    /// <summary>
    /// Throws if the input argument is null; otherwise, returns the argument itself.
    /// </summary>
    /// <typeparam name="T">Type of the input argument.</typeparam>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="message">The error message.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    public static T Null<T>([NotNull] T? param, string? message = null, [CallerArgumentExpression("param")] string expression = "")
    {
        Helper.ArgumentNullException.ThrowIfNull(param, message, expression);
        return param;
    }

    /// <summary>
    /// Throws if the input argument is null, an empty string or consists only of white-space characters; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="message">The error message.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    public static string Empty([NotNull] string? param, string? message = null, [CallerArgumentExpression("param")] string expression = "")
    {
        Helper.Exception.ThrowIfNullOrEmptyString(param, message, expression);
        return param;
    }

    /// <summary>
    /// Throws if the input argument is null, or an empty collection; otherwise, returns the argument itself.
    /// </summary>
    /// <typeparam name="T">Type of the input argument.</typeparam>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    public static IEnumerable<T> NullOrEmpty<T>([NotNull] IEnumerable<T>? param, string? message = null, [CallerArgumentExpression("param")] string expression = "")
    {
        Helper.Exception.ThrowIfNullOrEmptyCollection(param, message, expression);
        return param;
    }

    /// <summary>
    /// Throws if the input argument is out of the specified range; otherwise, returns the argument itself.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="min">The minimum acceptable value of the range (inclusive).</param>
    /// <param name="max">The maximum acceptable value of the range (inclusive).</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentOutOfRangeException">The argument falls out of acceptable range.</exception>
    public static T OutOfRange<T>([NotNull] T param, T min, T max, string? message = null, [CallerArgumentExpression("param")] string expression = "") where T : IComparable<T>
    {
        if (param.CompareTo(min) < 0 || param.CompareTo(max) > 0)
        {
            if (message.Empty())
                throw new ArgumentOutOfRangeException(expression);

            throw new ArgumentOutOfRangeException(expression, message);
        }

        return param;
    }

    /// <summary>
    /// Throws if the input argument cannot be cast to a member of the <typeparamref name="TEnum"/> enumeration; otherwise, returns the argument itself.
    /// </summary>
    /// <typeparam name="TEnum">Type of the enumeration used to validate the input argument.</typeparam>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    public static int InvalidEnumValue<TEnum>([NotNull] int param, string? message = null, [CallerArgumentExpression("param")] string expression = "")
        where TEnum : struct, Enum
    {
        Helper.InvalidEnumArgumentException.ThrowIfNotDefined<TEnum>(param, message, expression);
        return param;
    }

    /// <summary>
    /// Throws if the input argument cannot be cast to a member of the <typeparamref name="TEnum"/> enumeration; otherwise, returns the argument itself.
    /// </summary>
    /// <typeparam name="TEnum">Type of the enumeration used to validate the input argument.</typeparam>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    public static TEnum InvalidEnumValue<TEnum>([NotNull] TEnum param, string? message = null, [CallerArgumentExpression("param")] string expression = "")
        where TEnum : struct, Enum
    {
        Helper.InvalidEnumArgumentException.ThrowIfNotDefined(param, message, expression);
        return param;
    }

    /// <summary>
    /// Throws if the input argument equals IntPtr.Zero; otherwise, return the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The input argument is <see cref="IntPtr.Zero"/>.</exception>
    public static IntPtr ZeroPointer(IntPtr param, string? message = null, [CallerArgumentExpression("param")] string expression = "")
    {
        if (param == IntPtr.Zero)
        {
            if (message.Empty())
                throw new ArgumentException(expression);

            throw new ArgumentException(message, expression);
        }

        return param;
    }
}
