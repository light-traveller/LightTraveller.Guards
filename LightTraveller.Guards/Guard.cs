using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using static LightTraveller.Guards.ExceptionMessages;

namespace LightTraveller.Guards;

public class Guard
{
    /// <summary>
    /// Throws if the input argument is null; otherwise, returns the argument itself.
    /// </summary>
    /// <typeparam name="T">Type of the input argument.</typeparam>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    public static T Null<T>([NotNull] T param, [CallerArgumentExpression("param")] string? expression = null)
    {
        ArgumentNullException.ThrowIfNull(param, expression);
        return param;
    }

    /// <summary>
    /// Throws if the input argument is null, an empty string or consists only of white-space characters; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    public static string Empty([NotNull] string param, [CallerArgumentExpression("param")] string? expression = null)
    {
        ArgumentExceptionHelper.ThrowIfNullOrEmptyString(param, expression);
        return param;
    }

    /// <summary>
    /// Throws if the input argument is null, or an empty collection; otherwise, returns the argument itself.
    /// </summary>
    /// <typeparam name="T">Type of the input argument.</typeparam>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    public static IEnumerable<T> NullOrEmpty<T>([NotNull] IEnumerable<T> param, [CallerArgumentExpression("param")] string? expression = null)
    {
        ArgumentExceptionHelper.ThrowIfNullOrEmptyCollection(param, expression);
        return param;
    }

    /// <summary>
    /// Throws if the input argument is out of the specified range; otherwise, returns the argument itself.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="min">The minimum acceptable value of the range (inclusive).</param>
    /// <param name="max">The maximum acceptable value of the range (inclusive).</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentOutOfRangeException">The argument falls out of acceptable range.</exception>
    public static T OutOfRange<T>([NotNull] T param, T min, T max, [CallerArgumentExpression("param")] string? expression = null) where T : IComparable<T>
    {
        if (param.CompareTo(min) < 0 || param.CompareTo(max) > 0)
            throw new ArgumentOutOfRangeException(expression, "The parameter falls out of acceptable range.");

        return param;
    }

    /// <summary>
    /// Throws if the input argument cannot be cast to a member of the <typeparamref name="TEnum"/> enumeration; otherwise, returns the argument itself.
    /// </summary>
    /// <typeparam name="TEnum">Type of the enumeration used to validate the input argument.</typeparam>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    public static int InvalidEnumValue<TEnum>([NotNull] int param, [CallerArgumentExpression("param")] string? expression = null)
        where TEnum : struct, Enum
    {
        InvalidEnumArgumentExceptionHelper.ThrowIfNotDefined<TEnum>(param, expression);
        return param;
    }

    /// <summary>
    /// Throws if the input argument cannot be cast to a member of the <typeparamref name="TEnum"/> enumeration; otherwise, returns the argument itself.
    /// </summary>
    /// <typeparam name="TEnum">Type of the enumeration used to validate the input argument.</typeparam>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    public static TEnum InvalidEnumValue<TEnum>([NotNull] TEnum param, [CallerArgumentExpression("param")] string? expression = null)
        where TEnum : struct, Enum
    {
        InvalidEnumArgumentExceptionHelper.ThrowIfNotDefined(param, expression);
        return param;
    }

    /// <summary>
    /// Throws if the input argument is zero; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to zero.</exception>
    public static int Zero(int param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param == 0)
            throw new ArgumentException(string.Format(IntegerZero, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is zero; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to zero.</exception>
    public static long Zero(long param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param == 0L)
            throw new ArgumentException(string.Format(LongZero, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is zero; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to zero.</exception>
    public static float Zero(float param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param == 0F)
            throw new ArgumentException(string.Format(FloatZero, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is zero; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to zero.</exception>
    public static double Zero(double param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param == 0D)
            throw new ArgumentException(string.Format(DoubleZero, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is zero; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to zero.</exception>
    public static decimal Zero(decimal param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param == 0M)
            throw new ArgumentException(string.Format(DecimalZero, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is a negative number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to a negative value.</exception>
    public static int Negative(int param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param < 0)
            throw new ArgumentException(string.Format(IntegerNegative, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is a negative number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to a negative value.</exception>
    public static long Negative(long param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param < 0L)
            throw new ArgumentException(string.Format(LongNegative, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is a negative number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to a negative value.</exception>
    public static float Negative(float param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param < 0F)
            throw new ArgumentException(string.Format(FloatNegative, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is a negative number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to a negative value.</exception>
    public static double Negative(double param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param < 0D)
            throw new ArgumentException(string.Format(DoubleNegative, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is a negative number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to a negative value.</exception>
    public static decimal Negative(decimal param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param < 0M)
            throw new ArgumentException(string.Format(DecimalNegative, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is zero or a negative number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to zero or a negative value.</exception>
    public static int ZeroOrNegative(int param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param <= 0)
            throw new ArgumentException(string.Format(IntegerZeroOrNegative, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is zero or a negative number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to zero or a negative value.</exception>
    public static long ZeroOrNegative(long param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param <= 0L)
            throw new ArgumentException(string.Format(LongZeroOrNegative, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is zero or a negative number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to zero or a negative value.</exception>
    public static float ZeroOrNegative(float param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param <= 0F)
            throw new ArgumentException(string.Format(FloatZeroOrNegative, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is zero or a negative number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to zero or a negative value.</exception>
    public static double ZeroOrNegative(double param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param <= 0D)
            throw new ArgumentException(string.Format(DoubleZeroOrNegative, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is zero or a negative number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to zero or a negative value.</exception>
    public static decimal ZeroOrNegative(decimal param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param <= 0M)
            throw new ArgumentException(string.Format(DecimalZeroOrNegative, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is a positive number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to a positive value.</exception>
    public static int Positive(int param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param > 0)
            throw new ArgumentException(string.Format(IntegerPositive, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is a positive number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to a positive value.</exception>
    public static long Positive(long param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param > 0L)
            throw new ArgumentException(string.Format(LongPositive, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is a positive number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to a positive value.</exception>
    public static float Positive(float param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param > 0F)
            throw new ArgumentException(string.Format(FloatPositive, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is a positive number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to a positive value.</exception>
    public static double Positive(double param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param > 0D)
            throw new ArgumentException(string.Format(DoublePositive, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is a positive number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to a positive value.</exception>
    public static decimal Positive(decimal param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param > 0M)
            throw new ArgumentException(string.Format(DecimalPositive, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is zero or a positive number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to zero or a positive value.</exception>
    public static int ZeroOrPositive(int param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param >= 0)
            throw new ArgumentException(string.Format(IntegerZeroOrPositive, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is zero or a positive number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to zero or a positive value.</exception>
    public static long ZeroOrPositive(long param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param >= 0L)
            throw new ArgumentException(string.Format(LongZeroOrPositive, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is zero or a positive number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to zero or a positive value.</exception>
    public static float ZeroOrPositive(float param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param >= 0F)
            throw new ArgumentException(string.Format(FloatZeroOrPositive, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is zero or a positive number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to zero or a positive value.</exception>
    public static double ZeroOrPositive(double param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param >= 0D)
            throw new ArgumentException(string.Format(DoubleZeroOrPositive, expression), expression);

        return param;
    }

    /// <summary>
    /// Throws if the input argument is zero or a positive number; otherwise, returns the argument itself.
    /// </summary>
    /// <param name="param">The argument to be validated.</param>
    /// <param name="expression">The expression resolving to the value of the argument being checked. This is automatically generated by the compiler.</param>
    /// <returns>The input argument, if it passes the check.</returns>
    /// <exception cref="ArgumentException">The argument resolves to zero or a positive value.</exception>
    public static decimal ZeroOrPositive(decimal param, [CallerArgumentExpression("param")] string? expression = null)
    {
        if (param >= 0M)
            throw new ArgumentException(string.Format(DecimalZeroOrPositive, expression), expression);

        return param;
    }
}
